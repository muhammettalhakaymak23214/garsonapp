 /*
 Container(
              width: 350,
              height: 280,
              //color: Colors.amber,
              //alignment: Alignment.topCenter,
              child: ListView.builder(
                itemCount: (myList.length / 5).ceil(), // Satır sayısı
                itemBuilder: (BuildContext context, int rowIndex) {
                  return Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    //crossAxisAlignment: CrossAxisAlignment.start,
                    children: List.generate(
                      5,
                      (int columnIndex) {
                        final index = rowIndex * 5 + columnIndex;
                        if (index < myList.length) {
                          return GestureDetector(
                            onTap: () {
                              // Container tıklandığında yapılacak işlemler
                              print(index + 1);
                            },
                            child: Container(
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(5),
                                color: const Color.fromARGB(255, 255, 255, 255),
                              ),

                              height: 50,
                              width: 50,
                              margin: const EdgeInsets.all(10.0),
                              //  padding: const EdgeInsets.all(20.0),
                              alignment: Alignment.center,
                              child: Text(
                                myList[index],
                                style: const TextStyle(
                                    color: Color.fromRGBO(51, 51, 51, 100),
                                    fontSize: 20),
                              ),
                            ),
                          );
                        } else {
                          return Container(
                            height: 60,
                            width: 60,
                            margin: const EdgeInsets.all(5.0),
                          ); // Eksik elemanlar için boş Container
                        }
                      },
                    ),
                  );
                },
              ),
            ),

*/

           /* 

               // double screenWidth = MediaQuery.of(context).size.width;
------------------------------------
Ekran genişliği : 411.42857142857144
------------------------------------
Container(
                  padding: const EdgeInsets.all(0),
                  width: 250,
                  height: 310,
                  // color: Colors.amber,
                  alignment: Alignment.center,
                  child: ListView.builder(
                    itemCount: (myList.length / 4).ceil(), // Satır sayısı
                    itemBuilder: (BuildContext context, int rowIndex) {
                      return Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        //crossAxisAlignment: CrossAxisAlignment.center,
                        children: List.generate(
                          4,
                          (int columnIndex) {
                            final index = rowIndex * 4 + columnIndex;
                            if (index < myList.length) {
                              return GestureDetector(
                                onTap: () {
                                  // Container tıklandığında yapılacak işlemler
                                  print(index + 1);
                                },
                                child: Container(
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(5),
                                    color: const Color.fromARGB(
                                        255, 255, 255, 255),
                                  ),

                                  height: 50,
                                  width: 50,
                                  margin: const EdgeInsets.all(5.0),
                                  //  padding: const EdgeInsets.all(20.0),
                                  alignment: Alignment.center,
                                  child: Text(
                                    myList[index],
                                    style: const TextStyle(color: Colors.black),
                                  ),
                                ),
                              );
                            } else {
                              return Container(
                                height: 50,
                                width: 50,
                                margin: const EdgeInsets.all(5.0),
                              ); // Eksik elemanlar için boş Container
                            }
                          },
                        ),
                      );
                    },
                  ),
                ),
                */

                /*

                Container(
                  padding: const EdgeInsets.all(0),
                  width: 250,
                  height: 310,
                  alignment: Alignment.center,
                  child: ListView.builder(
                    itemCount: ((myList.length - startIndex) / 4).ceil(),
                    itemBuilder: (BuildContext context, int rowIndex) {
                      return Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: List.generate(
                          4,
                          (int columnIndex) {
                            final index =
                                rowIndex * 4 + columnIndex + startIndex;
                            if (index < myList.length) {
                              return GestureDetector(
                                onTap: () {
                                  print(myList[index]);
                                },
                                child: Container(
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(5),
                                    color: const Color.fromARGB(
                                        255, 255, 255, 255),
                                  ),
                                  height: 50,
                                  width: 50,
                                  margin: const EdgeInsets.all(5.0),
                                  alignment: Alignment.center,
                                  child: Text(
                                    myList[index],
                                    style: const TextStyle(color: Colors.black),
                                  ),
                                ),
                              );
                            } else {
                              return Container(
                                height: 50,
                                width: 50,
                                margin: const EdgeInsets.all(5.0),
                              );
                            }
                          },
                        ),
                      );
                    },
                  ),
                ),
                */

                /*

                mylist kullanılarak yapılan son yapı daha sonra mymap'e geçtim
                 Container(
              width: 350,
              height: 280,
              //color: Colors.amber,
              //alignment: Alignment.topCenter,
              child: ListView.builder(
                itemCount: (myList.length / 5).ceil(), // Satır sayısı
                itemBuilder: (BuildContext context, int rowIndex) {
                  return Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    //crossAxisAlignment: CrossAxisAlignment.start,
                    children: List.generate(
                      5,
                      (int columnIndex) {
                        final index = rowIndex * 5 + columnIndex;
                        if (index < myList.length) {
                          return GestureDetector(
                            onTap: () {
                              // Container tıklandığında yapılacak işlemler
                              print(index + 1);
                            },
                            child: Container(
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(5),
                                color: const Color.fromARGB(255, 255, 255, 255),
                              ),

                              height: 50,
                              width: 50,
                              margin: const EdgeInsets.all(10.0),
                              //  padding: const EdgeInsets.all(20.0),
                              alignment: Alignment.center,
                              child: Text(
                                myList[index],
                                style: const TextStyle(
                                    color: Color.fromRGBO(51, 51, 51, 100),
                                    fontSize: 20),
                              ),
                            ),
                          );
                        } else {
                          return Container(
                            height: 60,
                            width: 60,
                            margin: const EdgeInsets.all(5.0),
                          ); // Eksik elemanlar için boş Container
                        }
                      },
                    ),
                  );
                },
              ),
            ),
            */


            /*

/*
  final List<String> myList = [
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
  ];
  */

           

            /*
//---------------
            Container(
              margin: EdgeInsets.all(0),
              decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(20.0),
                  color: Colors.white),
              //color: Colors.amber,
              height: 40,
              width: 150,
              alignment: Alignment.center,
              child: const Text(
                "Siparişler",
                style: TextStyle(),
              ),
            ),


            */




//-------------------giriş sayfası orjinal kodlar -------------------------
/*
//import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:garsonapp/sabitler/renkler.dart';
import 'package:garsonapp/sayfalar/ana_sayfa.dart';

class GirisSayfasi extends StatefulWidget {
  const GirisSayfasi({super.key});

  @override
  State<GirisSayfasi> createState() => _GirisSayfasiState();
}

class _GirisSayfasiState extends State<GirisSayfasi> {
  //
  TextEditingController controller = TextEditingController();
  TextEditingController controller2 = TextEditingController();
  String yazi = '';
  String yazi2 = '';

  //
  Color butonColor = const Color.fromARGB(255, 255, 255, 255);
  Color butonYaziRengi = siyahYaziRengi;
  //

  @override
  Widget build(BuildContext context) {
    bool isFilled1 = controller.text.isNotEmpty;
    bool isFilled2 = controller2.text.isNotEmpty;
    // Color buttonColor = isFilled1 && isFilled2 ? Colors.green : Colors.white;
    return Scaffold(
      backgroundColor: girisEkraniArkaPlanRengi,
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            children: [
              const SizedBox(
                height: 50,
              ),
              Image.asset('assets/garson_logo.png', height: 300),
              SizedBox(
                width: 350,
                child: TextField(
                  onChanged: (value) {
                    setState(
                      () {
                        butonColor = isFilled1 && isFilled2
                            ? yesilButonRengi
                            : beyazButonRengi;
                        butonYaziRengi = isFilled1 && isFilled2
                            ? beyazYaziRengi
                            : siyahYaziRengi;
                      },
                    );
                  },
                  controller: controller,
                  decoration: InputDecoration(
                    hintText: "Kullanıcı Adı",
                    filled: true,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(20.0),
                    ),
                  ),
                ),
              ),
              const SizedBox(
                height: 50,
              ),
              SizedBox(
                width: 350,
                child: TextField(
                  controller: controller2,
                  onChanged: (value) {
                    setState(
                      () {
                        butonColor = isFilled1 && isFilled2
                            ? yesilButonRengi
                            : beyazButonRengi;
                        butonYaziRengi = isFilled1 && isFilled2
                            ? beyazYaziRengi
                            : siyahYaziRengi;
                      },
                    );
                  },
                  decoration: InputDecoration(
                    hintText: "Parola",
                    filled: true,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(20.0),
                    ),
                  ),
                ),
              ),
              const SizedBox(
                height: 50,
              ),
              SizedBox(
                width: 200,
                child: ElevatedButton(
                  onPressed: butonColor == yesilButonRengi
                      ? () {
                          setState(() {
                            yazi = controller.text;
                            yazi2 = controller2.text;

                            Navigator.of(context).push(
                              PageRouteBuilder(
                                pageBuilder:
                                    (context, animation, secondaryAnimation) =>
                                        const AnaSayfa(),
                                transitionsBuilder: (context, animation,
                                    secondaryAnimation, child) {
                                  var begin = const Offset(0.0, 1.0);
                                  var end = Offset.zero;
                                  var curve = Curves.ease;

                                  var tween = Tween(begin: begin, end: end)
                                      .chain(CurveTween(curve: curve));

                                  return SlideTransition(
                                    position: animation.drive(tween),
                                    child: child,
                                  );
                                },
                              ),
                            );
                          });
                        }
                      : () {},
                  style: ElevatedButton.styleFrom(
                    backgroundColor: butonColor,
                  ),
                  child: Text(
                    "Giriş Yap",
                    style: TextStyle(
                      color: butonYaziRengi,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                ),
              ),

              //
              //
              //
              //-----------silinecek----------------------
              Text(
                yazi,
                style: const TextStyle(color: Colors.white),
              ),
              Text(
                yazi2,
                style: const TextStyle(color: Colors.white),
              ),
              //------------------------------------------------
              //
              //
              //
            ],
          ),
        ),
      ),
    );
  }
}

*/

/*
ListView.builder(
                itemCount: (myMap.length / 5).ceil(), // Satır sayısı
                itemBuilder: (BuildContext context, int rowIndex) {
                  return Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: List.generate(
                      5,
                      (int columnIndex) {
                        final index = rowIndex * 5 + columnIndex;
                        final mapValue = myMap[index];
                        if (index < myMap.length) {
                          return GestureDetector(
                            onTap: () {
                              // Container tıklandığında yapılacak işlemler
                              // print(index + 1 + );
                              print(
                                  'Key: ${myMap.keys.elementAt(index)}, Value: ${mapValue != null ? (mapValue ? 'true' : 'false') : 'null'}');
                            },
                            child: Container(
                              decoration: BoxDecoration(
                                borderRadius: BorderRadius.circular(5),
                                color: mapValue != null && mapValue
                                    ? doluMasaRengi
                                    : bosMasaRengi,
                              ),
                              height: 50,
                              width: 50,
                              margin: const EdgeInsets.all(10.0),
                              alignment: Alignment.center,
                              child: Text(
                                (myMap.keys.elementAt(index))
                                    .toString(), // Sayıları ekrana yazdırıyoruz
                                style: baslikTextStyle,
                              ),
                            ),
                          );
                        } else {
                          return Container(
                            height: 60,
                            width: 60,
                            margin: const EdgeInsets.all(5.0),
                          ); // Eksik elemanlar için boş Container
                        }
                      },
                    ),
                  );
                },
              ),

*/


/*
import 'package:garsonapp/sayfalar/siparis_sayfasi.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const GirisSayfasi(),
    );
  }
}
*/

/*

return Container(
                          margin: EdgeInsets.all(8.0),
                          padding: EdgeInsets.all(8.0),
                          decoration: BoxDecoration(
                            border: Border.all(),
                            borderRadius: BorderRadius.circular(8.0),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                  'Table Number: ${tableData[index].tableNumber}'),
                              Text('Status: ${tableData[index].status}'),
                            ],
                          ),
                        );

*/

/*
import 'dart:convert';
import 'dart:math';
import 'package:garsonapp/sabitler/api_url.dart';
import 'package:garsonapp/sayfalar/siparis_sayfasi.dart';
import 'package:http/http.dart' as http;
import 'package:flutter/material.dart';
import 'package:garsonapp/apiler/masa_getir.dart';
import 'package:garsonapp/sabitler/boxDecoreation.dart';
import 'package:garsonapp/sabitler/divider.dart';
import 'dart:async';

import 'package:garsonapp/sabitler/renkler.dart';
import 'package:garsonapp/sabitler/text_style.dart';

// Timer'ı sınıfın dışında tanımlayın ki dispose işlevi içinde kullanabilelim
late Timer _timer;

class AnaSayfa extends StatefulWidget {
  const AnaSayfa({super.key});

  @override
  State<AnaSayfa> createState() => _AnaSayfaState();
}

class _AnaSayfaState extends State<AnaSayfa> {
  final List<String> myList = [
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "40",
  ];
  // Rastgele eleman sayısı belirleme

  Map<int, bool> myMap = {};

  // Veri havuzundan myMap'i dolduran bir fonksiyon

  void fillMyMapFromDataSource() {
    // Burada, gerçek veri kaynağından verileri alarak myMap'i doldurmalısınız
    // Örnek olarak rastgele değerler ekleyelim
    final random = Random();
    for (int i = 0; i < myList.length; i++) {
      myMap[i] =
          random.nextBool(); // Rastgele true veya false değerler ekleniyor
    }
  }

  Map<int, bool> tableStatusMap = {};

  Map<int, String> my2Map = {
    0: "Sipariş Hazır",
    1: "Sipariş Hazır",
    2: "Sipariş İptal",
    3: "Sipariş Beklemede",
    4: "Sipariş Hazır",
    5: "Sipariş Hazır",
    6: "Sipariş Hazır",
    7: "Sipariş İptal",
    8: "Sipariş Beklemede",
    9: "Sipariş Hazır",

    // Diğer anahtar-değer çiftleri buraya eklenir...
  };

  Map<String, Color> statusColors = {
    "Sipariş Hazır": siparisHazir,
    "Sipariş İptal": siparisIptal,
    "Sipariş Beklemede": siparisBeklemede,
  };

  int startIndex = 0;

  @override
  void initState() {
    super.initState();
    // Timer'ı başlat
    _startTimer();
    // _startTimer();
  }

  //List<Map<String, bool>> tableData = [];

  Map<int, bool> tableData = {};

  //Map<int, bool> tableData = {};

  // Map<int, bool> tableData = {};

  @override
  void dispose() {
    // Timer durdurulmalı, aksi halde hafızada sızıntı olabilir
    _timer.cancel();
    super.dispose();
  }

  void _startTimer() {
    const Duration refreshDuration = Duration(seconds: 5);
    _timer = Timer.periodic(refreshDuration, (timer) {
      // setState çağrarak sayfayı güncelle
      fetchTableData();
      setState(() {});
    });
  }

  Future<List<TableData>> fetchTableData() async {
    final response = await http.get(Uri.parse(apiUrlMasaGetir));
    if (response.statusCode == 200) {
      List<dynamic> data = jsonDecode(response.body);
      List<TableData> tableDataList =
          data.map((item) => TableData.fromJson(item)).toList();
      return tableDataList;
    } else {
      throw Exception('Failed to load table data');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: arkaPlanRengi,
      body: Center(
        child: Column(
          children: [
            const SizedBox(
              height: 50,
            ),
            Container(
              decoration: boxDecoreation,
              height: 40,
              width: 350,
              alignment: Alignment.center,
              child: Text(
                "MASALAR",
                style: baslikTextStyle,
              ),
            ),
            //------------------------------------------------------------------------------------
            Container(
              width: 350,
              height: 280,
              child: FutureBuilder<List<TableData>>(
                future: fetchTableData(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(child: CircularProgressIndicator());
                  } else if (snapshot.hasError) {
                    return Center(child: Text('Error: ${snapshot.error}'));
                  } else {
                    List<TableData>? tableData = snapshot.data;
                    return GridView.builder(
                      gridDelegate:
                          const SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 5, // 5 öğe yatayda sıralanacak
                        crossAxisSpacing: 8.0,
                        mainAxisSpacing: 8.0,
                      ),
                      itemCount: tableData!.length,
                      itemBuilder: (context, index) {
                        Color containerColor = tableData[index].status
                            ? doluMasaRengi
                            : bosMasaRengi;
                        return GestureDetector(
                          onTap: () {
                            /*
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => MenuPage(
                                      masaNumarasi:
                                          tableData[index].tableNumber)),
                            );
                            */
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                builder: (context) => MenuPage(
                                    masaNumber: tableData[index]
                                        .tableNumber), // İkinci sayfaya veriyi iletiyoruz
                              ),
                            );
                          },
                          child: Container(
                            // margin: EdgeInsets.all(8.0),
                            // padding: EdgeInsets.all(8.0),
                            decoration: BoxDecoration(
                              color: containerColor,
                              border: Border.all(),
                              borderRadius: BorderRadius.circular(5.0),
                            ),
                            alignment: Alignment.center,
                            child: Text(
                              '${tableData[index].tableNumber}',
                              style: TextStyle(
                                  color: siyahYaziRengi,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 25),
                              textAlign: TextAlign.center,
                            ),
                          ),
                        );
                      },
                    );
                  }
                },
              ),
            ),

            //------------------------------------------------------------------------------------
            CustomDivider(),
            Container(
              decoration: boxDecoreation,
              height: 40,
              width: 350,
              alignment: Alignment.center,
              child: Text(
                "SİPARİŞLER",
                style: baslikTextStyle,
              ),
            ),
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            Container(
              width: 350,
              height: 400,
              child: ListView.builder(
                itemCount: my2Map.length,
                itemBuilder: (BuildContext context, int index) {
                  int key = my2Map.keys.elementAt(index);
                  String value = my2Map.values.elementAt(index);
                  return Container(
                    alignment: Alignment.center,
                    width: 300,
                    height: 50,
                    margin: const EdgeInsets.all(5),
                    decoration: BoxDecoration(
                      color: statusColors[my2Map.values.elementAt(index)] ??
                          Colors.transparent,
                      borderRadius: BorderRadius.circular(5),
                    ),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Container(
                          decoration: boxDecoreation,
                          margin: const EdgeInsets.all(5),
                          alignment: Alignment.center,
                          width: 80,
                          height: 30,
                          child: Text(
                            'Masa: $key',
                            style: containerTextStyle,
                          ),
                        ),
                        const SizedBox(width: 5),
                        Container(
                          decoration: boxDecoreation,
                          margin: const EdgeInsets.all(5),
                          alignment: Alignment.center,
                          width: 150,
                          height: 30,
                          child: Text(
                            value,
                            style: containerTextStyle,
                          ),
                        ),
                        const SizedBox(width: 35),
                        Container(
                          height: 50,
                          width: 50,
                          child: IconButton(
                              onPressed: () {
                                // Butona basıldığında yapılacak işlemler buraya yazılır
                                setState(() {
                                  my2Map.remove(key);
                                });
                              },
                              icon: const Icon(Icons.clear), // Çarpı ikonu
                              iconSize: 30, // İkon boyutu
                              color: ikonRengi // İkon rengi
                              ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          ],
        ),
      ),
    );
  }


// Model sınıfı
*/
